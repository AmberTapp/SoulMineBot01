"""Handlers for news-related actions."""

from __future__ import annotations

import logging

from telegram import Update
from telegram.ext import ContextTypes

from ...config.database import get_db
from ..keyboards.main_keyboard import get_back_to_main_keyboard, get_news_keyboard
from ..utils.database import get_user_by_telegram_id

logger = logging.getLogger(__name__)

async def handle_news_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle News button"""
    user = update.effective_user
    with get_db() as db:
        user_obj = get_user_by_telegram_id(db, str(user.id))
    
    if not user_obj:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start")
        return
    
    # Send news options
    news_message = (
        "üì∞ *–ù–æ–≤–æ—Å—Ç–∏ SoulMine*\n\n"
        "–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π:\n\n"
        "‚Ä¢ üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ - –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –ø–æ–ª—É—á–∞–π—Ç–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n"
        "‚Ä¢ üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –æ—Ç–∫–ª—é—á–∏—Ç–µ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    )
    
    await update.message.reply_text(news_message, reply_markup=get_news_keyboard(), parse_mode="Markdown")

async def latest_news_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle latest news callback"""
    query = update.callback_query
    await query.answer()
    
    # Send latest news
    news_message = (
        "üì¢ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏*\n\n"
        "üéâ *–û–±—ä—è–≤–ª—è–µ–º –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞!* (20.10.2024)\n\n"
        "–°–µ–≥–æ–¥–Ω—è –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –∏ –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n"
        "‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –º–∞–π–Ω–∏–Ω–≥ $LOVE —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ 20%\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏\n"
        "‚Ä¢ –£–ª—É—á—à–µ–Ω –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! üéâ"
    )
    
    await query.edit_message_text(news_message, reply_markup=get_back_to_main_keyboard(), parse_mode="Markdown")

async def enable_notifications_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle enable notifications callback"""
    query = update.callback_query
    await query.answer()
    
    # Enable notifications
    user = update.effective_user
    with get_db() as db:
        user_obj = get_user_by_telegram_id(db, str(user.id))

        if user_obj:
            user_obj.notifications_enabled = True
            db.commit()

            # Send confirmation
            confirm_message = (
                "üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã*\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
                "‚Ä¢ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n"
                "‚Ä¢ –ù–æ–≤—ã—Ö –º–∞—Ç—á–∞—Ö\n"
                "‚Ä¢ –ù–∞–≥—Ä–∞–¥–∞—Ö –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
                "‚Ä¢ –ê–∫—Ü–∏—è—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö\n\n"
                "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."
            )

            await query.edit_message_text(confirm_message, reply_markup=get_back_to_main_keyboard(), parse_mode="Markdown")
        else:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_back_to_main_keyboard())

async def disable_notifications_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle disable notifications callback"""
    query = update.callback_query
    await query.answer()
    
    # Disable notifications
    user = update.effective_user
    with get_db() as db:
        user_obj = get_user_by_telegram_id(db, str(user.id))

        if user_obj:
            user_obj.notifications_enabled = False
            db.commit()

            # Send confirmation
            confirm_message = (
                "üîï *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã*\n\n"
                "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n"
                "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."
            )

            await query.edit_message_text(confirm_message, reply_markup=get_back_to_main_keyboard(), parse_mode="Markdown")
        else:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_back_to_main_keyboard())